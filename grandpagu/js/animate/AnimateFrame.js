!function (window, undefined) { var _AnimateFrame = function () { var _UserOperations, _AllScenes, _SwitchModel, _DirectionAsc, _DirectionDesc, _Selector, _BeforScenes, _Self, _IsChangingScene, _CacheToScene, _LastAnimateTime, _StartStopChangeScenesTime, _LastRollerSwitchDelta, _IsTouchComplete, ScenesIDToNo, InitScenes, InitMenu, ActiveMenu, RollerSwitchScenes, DirectionSwitchScenes, TouchListenScoll, TouchSwitchScenes, BindEvent; this.CurScenes = null, this.IsLockScenes = !1, this.Selector = { AnimteFrameContainer: ".cmn-AnimteFrameContainer", ScenesContainer: ".cmn-ScenesContainer", Scenes: ".cmn-Scenes", MenuContainer: ".cmn-MenuContainer", Menu: ".cmn-Menu", MenuItem: ".cmn-MenuItem" }, this.allScenes = [], this.ScenesChangeParam = { EnterSpeed: null, QuitSpeed: null }, _UserOperations = 1, _AllScenes = [], _SwitchModel = "", _DirectionAsc = "", _DirectionDesc = "", _Selector = "", _BeforScenes = null, _Self = this, _IsChangingScene = null, _CacheToScene = { scenesNoOrID: "", swtichMode: "", direction: "", funcAfterShow: "" }, _LastAnimateTime = 0, _StartStopChangeScenesTime = 0, _LastRollerSwitchDelta = 0, _IsTouchComplete = !1, this.OnUserWantToChangeScenes = function () { }, this.OnBeforeScenesChange = function () { }, this.OnScenesAfterHide = function () { }, this.OnScenesAfterShow = function () { }, this.OnScenesLoadAllComplete = function () { }, this.OnRollerSwitchScenes = function () { }, this.OnKeyboardSwitchScenes = function () { }, this.OnTouchSwitchScenes = function () { }, ScenesIDToNo = function (a) { var c, d, b = 0; if ("string" == $.type(a) && "" != a) for (c = 0; c < _AllScenes.length; c++) if (d = _AllScenes[c], d.ID == a) { b = d.ScenesNo; break } return b }, InitScenes = function (a) { var b = _AllScenes[a], c = a, d = !1; b.Init(function () { var e, f, a = Cmn.Func.GetParamFromUrl("ScenesID"); if ("" != a ? ScenesIDToNo(a) == c && _Self.SlideTo(c, ScenesSwitch.None, Direction.None, b.OnJumpFromUrl) : (e = Cmn.Func.GetParamFromUrl("ScenesNo"), "" != e && parseInt(e) == c && _Self.SlideTo(c, ScenesSwitch.None, Direction.None, b.OnJumpFromUrl)), null != _Self.CurScenes && 0 == _Self.CurScenes.HasLoad) d = !0, c = _Self.CurScenes.ScenesNo; else for (f = 0; f < _AllScenes.length; f++) if (!_AllScenes[f].HasLoad) { d = !0, c = f; break } _Self.CurScenes.ScenesNo == b.ScenesNo && (_Self.OnScenesAfterShow(b), b.OnScenesAfterShow()), d ? (_AllScenes.length > 0 && 1 == c && _Self.CurScenes.Show(SwitchMode.None, Direction.None, function (a) { _Self.OnScenesAfterShow(a), a.OnScenesAfterShow(), a.RunQueueAnimate(0), a.AnimateMan.RunAutoRunAnimate() }), InitScenes(c)) : _Self.OnScenesLoadAllComplete() }) }, InitMenu = function () { var a = $(_Self.Selector.MenuContainer); return a.length <= 0 ? !1 : (a.find(_Self.Selector.Menu).unbind("click").bind("click", function () { var b, c, a = $(this).attr("scenesid"); if (a != undefined && "" != a) _Self.SlideTo($(this).attr("scenesid")); else for (b = $(this), c = 0; 4 > c; c++) { if (b.find(_Self.Selector.MenuItem).length > 0) { _Self.SlideTo(b.find(_Self.Selector.MenuItem).first().attr("scenesid").split(",")[0]); break } b = b.parent() } }), a.find(_Self.Selector.MenuItem).unbind("click").bind("click", function () { _Self.SlideTo($(this).attr("scenesid").split(",")[0]) }), void 0) }, ActiveMenu = function (scenesID) { var _cfg, _menuItem, _parent, _i, _menuContainer = $(_Self.Selector.MenuContainer); if (_menuContainer.length <= 0) return !1; if (_cfg = _menuContainer.attr("cfg"), "string" == typeof _cfg && "" != _cfg) try { _cfg = eval("(" + _cfg + ")") } catch (err) { return Cmn.Log("菜单配置错误！错误信息：" + err.message), !1 } if (_cfg == undefined) return !1; if (_menuItem = _menuContainer.find(_Self.Selector.MenuItem + "[scenesid *= '" + scenesID + "']"), _cfg.MenuItemActiveClass != undefined && (_menuContainer.find(_Self.Selector.MenuItem).removeClass(_cfg.MenuItemActiveClass), _menuItem.addClass(_cfg.MenuItemActiveClass)), _cfg.MenuActiveClass != undefined) for (_menuContainer.find(_Self.Selector.Menu).removeClass(_cfg.MenuActiveClass), _parent = _menuItem.parent(), _i = 0; 3 > _i; _i++) { if (_parent.hasClass(_Self.Selector.Menu.replace(".", ""))) { _parent.addClass(_cfg.MenuActiveClass); break } if (_parent.find(_Self.Selector.Menu).length > 0) { _parent.find(_Self.Selector.Menu).addClass(_cfg.MenuActiveClass); break } _parent = _parent.parent() } return !0 }, this.GetNextScenesNo = function (a) { var b, c, d; for (a == undefined && (a = _Self.CurScenes.ScenesNo), b = a, c = _Self.allScenes[a].ScenesQueueName, d = a + 1; d < _Self.allScenes.length; d++) if (1 == _Self.allScenes[d].IsInNormalQueue && _Self.allScenes[d].ScenesQueueName == c) { b = d; break } return b }, this.GetPreScenesNo = function (a) { var b, c, d; for (a == undefined && (a = _Self.CurScenes.ScenesNo), b = a, c = _Self.allScenes[a].ScenesQueueName, d = a - 1; d >= 0; d--) if (1 == _Self.allScenes[d].IsInNormalQueue && _Self.allScenes[d].ScenesQueueName == c) { b = d; break } return b }, this.GetPreNormalQueueNo = function (a) { var b, c, d, e; for (a == undefined && (a = _Self.CurScenes.ScenesNo), b = [], c = _Self.allScenes[a].ScenesQueueName, d = a - 1; d >= 0; d--) if (1 == _Self.allScenes[d].IsInNormalQueue && _Self.allScenes[d].ScenesQueueName != c) { for (c = _Self.allScenes[d].ScenesQueueName, b.push(d), e = d - 1; e >= 0; e--) 1 == _Self.allScenes[e].IsInNormalQueue && _Self.allScenes[e].ScenesQueueName == c && b.push(e); break } return 0 == b.length && b.push(a), b[b.length - 1] }, this.GetNextNormalQueueNo = function (a) { var b, c, d; for (a == undefined && (a = _Self.CurScenes.ScenesNo), b = a, c = _Self.allScenes[a].ScenesQueueName, d = a + 1; d < _Self.allScenes.length; d++) if (1 == _Self.allScenes[d].IsInNormalQueue && _Self.allScenes[d].ScenesQueueName != c) { b = d; break } return b }, RollerSwitchScenes = function (a) { var b = _Self.CurScenes.ScenesNo; a > 0 ? (_UserOperations = -1, b = _Self.GetPreScenesNo(b)) : (_UserOperations = 1, b = _Self.GetNextScenesNo(b)), _Self.OnRollerSwitchScenes(a, b) !== !1 && _Self.SlideTo(b) }, DirectionSwitchScenes = function (a) { var b = _Self.CurScenes.ScenesNo, c = ""; switch (a.keyCode) { case 38: a.preventDefault(), _UserOperations = -1, b = _Self.GetPreScenesNo(b), c = Direction.Down; break; case 40: a.preventDefault(), _UserOperations = 1, b = _Self.GetNextScenesNo(b), c = Direction.Up; break; case 37: a.preventDefault(), _UserOperations = -1, b = _Self.GetPreScenesNo(b), c = Direction.Right; break; case 39: a.preventDefault(), _UserOperations = 1, b = _Self.GetNextScenesNo(b), c = Direction.Left } _Self.OnKeyboardSwitchScenes(b) !== !1 && c && _Self.SlideTo(b, _SwitchModel, c) }, TouchListenScoll = function (a, b) { var c = $("#" + _Self.CurScenes.ID), d = c[0].scrollHeight, e = c.scrollTop() || c[0].scrollTop; if (d > 0) if ("U" == a) { if (0 != e) return c.scrollTop(e - b), !0 } else if ("D" == a && d - e != c.height()) return c.scrollTop(e - b), !0; return Cmn.DebugLog(c.height() + "==" + e + "==" + d + "==" + b), !1 }, TouchSwitchScenes = function (a, b, c) { if (_IsTouchComplete) return !1; var d = 50, e = _Self.CurScenes.ScenesNo, f = Math.abs(a.pageY - c), g = Math.abs(a.pageX - b), h = ""; if (g > f && g > f) { if (a.pageX - b > 0) { if (TouchListenScoll("L", g)) return !1; Math.abs(a.pageX - b) > d && (e = _Self.GetPreScenesNo(e), h = Direction.Right, _UserOperations = -1) } else if (a.pageX - b < 0) { if (TouchListenScoll("R", -1 * g)) return !1; Math.abs(a.pageX - b) > d && (e = _Self.GetNextScenesNo(e), h = Direction.Left, _UserOperations = 1) } } else if (f > g) if (a.pageY - c > 0) { if (TouchListenScoll("U", g)) return !1; Math.abs(a.pageY - c) > d && (e = _Self.GetPreScenesNo(e), h = Direction.Down, _UserOperations = -1) } else if (a.pageY - c < 0) { if (TouchListenScoll("D", -1 * g)) return !1; Math.abs(a.pageY - c) > d && (e = _Self.GetNextScenesNo(e), h = Direction.Up, _UserOperations = 1) } return _Self.CurScenes.ScenesNo != e && 0 == _IsTouchComplete ? (_IsTouchComplete = !0, _Self.OnTouchSwitchScenes(e) === !1 ? !1 : (AnimateFrame.SlideTo(e, _SwitchModel, h), !0)) : !1 }, BindEvent = function () { var a = "createTouch" in document, b = null, c = null; a ? ($(_Selector).on("touchstart", function (a) { a = event.touches ? event.touches[0] : a, b = a.pageX, c = a.pageY }), $(_Selector).on("touchmove", function (a) { a.preventDefault(), a = event.touches ? event.touches[0] : a; var d = (new Date).getTime(); d - _LastAnimateTime < 50 + _Self.CurScenes.Speed || TouchSwitchScenes(a, b, c) && (_LastAnimateTime = d, b = c = null) }), $(_Selector).on("touchend", function () { _IsTouchComplete = !1, b = c = null })) : $(_Selector).bind("mousewheel DOMMouseScroll", function (a) { var b, c; a.preventDefault(), b = a.originalEvent.wheelDelta || -a.originalEvent.detail, c = (new Date).getTime(), 500 > c - _StartStopChangeScenesTime && (0 >= _LastRollerSwitchDelta && 0 >= b || _LastRollerSwitchDelta > 0 && b > 0) || (_LastRollerSwitchDelta = b, RollerSwitchScenes(b), _StartStopChangeScenesTime = c) }) }, this.UnBindKeyboardSwitch = function () { $(document).off("keydown", DirectionSwitchScenes) }, this.BindKeyboardSwitch = function () { _Self.UnBindKeyboardSwitch(), $(document).on("keydown", DirectionSwitchScenes) }, this.Init = function (a, b, c, d, e) { return _DirectionAsc = c || Direction.Up, _DirectionDesc = d || Direction.Down, _SwitchModel = b || SwitchMode.Shifting, _Selector = _Self.Selector.AnimteFrameContainer, $(_Selector + " , " + _Self.Selector.ScenesContainer).css({ width: "100%", height: "100%", width: "100%", top: "0px", position: "relative", left: "0px" }), $(_Self.Selector.ScenesContainer).css({ position: "absolute" }), $(_Self.Selector.Scenes).each(function (b, c) { var d, f; $(c).css({ height: "100%", width: "100%", display: "none", opacity: "0", position: "absolute", "z-index": "0" }), d = new Scenes(c, a, e), _AllScenes.push(d), d.ScenesNo = b, f = $(c).attr("scenesqueuename"), $(c).attr("scenesqueuename") == undefined && (f = ""), d.ScenesQueueName = f }), this.CurScenes = _BeforScenes = _AllScenes[0], this.allScenes = _AllScenes, InitScenes(0), InitMenu(), ActiveMenu(_Self.CurScenes.ID), BindEvent(), _Self }, this.SlideTo = function (a, b, c, d) { var e, f, g; if (_IsChangingScene === !0) return _CacheToScene.scenesNoOrID = a, _CacheToScene.swtichMode = b, _CacheToScene.direction = c, _CacheToScene.funcAfterShow = d, void 0; if (_IsChangingScene = !0, e = 0, f = 0, g = function () { if (_BeforScenes = _Self.CurScenes, _IsChangingScene = !1, "" !== _CacheToScene.scenesNoOrID) { var a = _CacheToScene.scenesNoOrID; _CacheToScene.scenesNoOrID = "", _Self.SlideTo(a, _CacheToScene.swtichMode, _CacheToScene.direction, _CacheToScene.funcAfterShow) } }, "string" == typeof a && "" != a) f = ScenesIDToNo(a); else { if ("number" != typeof a) return g(), void 0; f = a } return _Self.OnUserWantToChangeScenes(_AllScenes, f, _UserOperations) === !1 ? (g(), void 0) : f == _Self.CurScenes.ScenesNo || 0 > f || f > _AllScenes.length - 1 || _Self.IsLockScenes ? (g(), void 0) : (_Self.CurScenes = _AllScenes[f], ActiveMenu(_Self.CurScenes.ID), _BeforScenes.AnimateMan.ExitScene(), null !== _Self.ScenesChangeParam.QuitSpeed && (_BeforScenes.Speed = _Self.ScenesChangeParam.QuitSpeed), null !== _Self.ScenesChangeParam.EnterSpeed && (_Self.CurScenes.Speed = _Self.ScenesChangeParam.EnterSpeed), _Self.OnBeforeScenesChange(_BeforScenes, _Self.CurScenes), f < _BeforScenes.ScenesNo ? (_BeforScenes.AnimateMan.Stop(), _BeforScenes.Hide(b || _SwitchModel, c || _DirectionDesc, function (a) { a.AnimateMan.Stop(), a.AnimateMan.Init(), _Self.OnScenesAfterHide(a), a.OnScenesAfterHide(), 2 == ++e && g() }), _Self.CurScenes.Show(b || _SwitchModel, c || _DirectionDesc, function (a) { _Self.OnScenesAfterShow(a), a.OnScenesAfterShow(), a.RunQueueAnimate(0), a.AnimateMan.RunAutoRunAnimate(), 2 == ++e && g(), "function" == $.type(d) && d() })) : (_BeforScenes.AnimateMan.Stop(), _BeforScenes.Hide(b || _SwitchModel, c || _DirectionAsc, function (a) { a.AnimateMan.Stop(), a.AnimateMan.Init(), _Self.OnScenesAfterHide(a), a.OnScenesAfterHide(), 2 == ++e && g() }), _Self.CurScenes.Show(b || _SwitchModel, c || _DirectionAsc, function (a) { _Self.OnScenesAfterShow(a), a.OnScenesAfterShow(), a.RunQueueAnimate(0), a.AnimateMan.RunAutoRunAnimate(), 2 == ++e && g(), "function" == $.type(d) && d() })), void 0) } }; window.AnimateFrame = new _AnimateFrame }(window);