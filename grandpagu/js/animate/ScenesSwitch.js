var SwitchMode = { Shifting: "Shifting", Fade: "Fade", Rotation: "Rotation", Reversal: "Reversal", None: "None" }, Direction = { Left: "L", Right: "R", Down: "D", Up: "U", None: "none" }, ScenesSwitch = { StyleInit: function (a) { var b = a.parent(AnimateFrame.Selector.ScenesContainer); b.css({ "-webkit-transform-style": "", "-webkit-backface-visibility": "", "-webkit-transform": "" }), b.parent(AnimateFrame.Selector.AnimteFrameContainer).css({ "-webkit-perspective": "" }), a.css({ "-webkit-transition": "" }) }, Shifting: function (a, b, c, d, e, f) { var g = null, h = $(a); return d == Direction.Left ? g = { left: "-=100%" } : d == Direction.Right ? g = { left: "+=100%" } : d == Direction.Up ? g = { top: "-=100%" } : d == Direction.Down && (g = { top: "+=100%" }), h.length < 1 || !g ? "" : (ScenesSwitch.StyleInit(h), ("none" == h.css("display") || 0 == h.css("opacity")) && (h.removeAttr("style").css({ height: "100%", width: "100%", display: "none", opacity: "0", position: "absolute", "z-index": "0" }), d == Direction.Left ? h.css({ left: "100%", top: "0px", display: "block", opacity: "1" }) : d == Direction.Right ? h.css({ left: "-100%", top: "0px", display: "block", opacity: "1" }) : d == Direction.Up ? h.css({ top: "100%", left: "0px", display: "block", opacity: "1" }) : d == Direction.Down && h.css({ top: "-100%", left: "0px", display: "block", opacity: "1" })), e && e(h), h.animate(g, { easing: c, duration: b, complete: function () { f && f(h) } }), void 0) }, Fade: function (a, b, c, d, e, f) { var g = $(a); return g.length < 1 ? "" : (ScenesSwitch.StyleInit(g), e && e(g), "none" == g.css("display") || 0 == g.css("opacity") ? (g.removeAttr("style").css({ height: "100%", width: "100%", display: "none", opacity: "0", position: "absolute", "z-index": "0" }), g.css({ top: "0px", left: "0px", opacity: "1", "z-index": "1" }).fadeIn(b, function () { f && f(g) })) : g.css({ top: "0px", left: "0px", opacity: "0", "z-index": "0" }).fadeOut(b, function () { f && f(g) }), void 0) }, Rotation: function () { }, Reversal: function (a, b, c, d, e, f) { var m, g = null, h = $(a), i = 100, j = $(AnimateFrame.Selector.AnimteFrameContainer).width(), k = $(AnimateFrame.Selector.AnimteFrameContainer).height(), l = 1; return d == Direction.Right ? (i = j / 2, g = { rotationY: "+=90deg", transformOrigin: "50% top -" + i }) : d == Direction.Left ? (i = j / 2, g = { rotationY: "-=90deg", transformOrigin: "50% top -" + i }) : d == Direction.Down ? (i = k / 2, g = { rotationX: "-=90deg", transformOrigin: "left 50% -" + i }) : d == Direction.Up && (i = k / 2, g = { rotationX: "+=90deg", transformOrigin: "left 50% -" + i }), h.length < 1 || !g ? "" : (m = h.parent(AnimateFrame.Selector.ScenesContainer), m.css({ "-webkit-transform-style": " preserve-3d", "-webkit-perspective": i + "px", "-webkit-backface-visibility": "hidden" }), "none" == h.css("display") || 0 == h.css("opacity") ? (h.css({ left: "0px", top: "0px", display: "block", opacity: "1", "z-index": "1" }), d == Direction.Right ? TweenMax.set(h, { rotationY: "-90deg", rotationX: "0deg", transformOrigin: "50% top -" + i }) : d == Direction.Left ? TweenMax.set(h, { rotationY: "90deg", rotationX: "0deg", transformOrigin: "50% top -" + i }) : d == Direction.Down ? TweenMax.set(h, { rotationX: "90deg", rotationY: "0deg", transformOrigin: "left 50% -" + i }) : d == Direction.Up && TweenMax.set(h, { rotationX: "-90deg", rotationY: "0deg", transformOrigin: "left 50% -" + i })) : (h.css({ "z-index": "0" }), l = 0), e && e(h), g = $.extend(g, { alpha: l, onComplete: function () { f && f(h) } }), TweenMax.to(h, b / 1e3, g), void 0) }, None: function (a, b, c, d, e, f) { var g = $(a); return g.length < 1 ? "" : (ScenesSwitch.StyleInit(g), e && e(g), "none" == g.css("display") || 0 == g.css("opacity") ? (g.removeAttr("style").css({ height: "100%", width: "100%", display: "none", opacity: "0", position: "absolute", "z-index": "0" }), g.css({ top: "0px", left: "0px", display: "block", opacity: "1", "z-index": "1" })) : g.css({ top: "0px", left: "0px", display: "none", opacity: "0", "z-index": "0" }), f && f(g), void 0) } }, a = ScenesSwitch.Shifting();